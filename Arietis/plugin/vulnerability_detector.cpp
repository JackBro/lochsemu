#include "stdafx.h"
#include "plugin.h"
#include "engine.h"
#include "event.h"

class VulnerabilityDetector : public Plugin {
public:
    VulnerabilityDetector() : Plugin("Vulnerability Detector", Func_PreExecute)
    {

    }

    void    Initialize() override 
    {
        m_debugger  = GetEngine()->GetDebugger();
        m_taint     = GetEngine()->GetTaintEngine();
    }

    void    Serialize(Json::Value &root) const override
    {
        Plugin::Serialize(root);
        root["detect_injected_code"] = m_detectInjectedCode;
    }

    void    Deserialize(Json::Value &root) override 
    {
        Plugin::Deserialize(root);
        m_detectInjectedCode = root.get("detect_injected_code", m_detectInjectedCode).asBool();
    }

    void    OnPreExecute(PreExecuteEvent &event, bool firstTime) override
    {
        if (!firstTime) return;
        u32 eip = event.Cpu->EIP;

        if (m_detectInjectedCode) {
            if (m_taint->CpuTaint.Eip.IsAnyTainted()) {
                Taint1 t = m_taint->MemTaint.Get<1>(eip);
                if (t.IsAnyTainted()) {
                    ReportVulnerability(eip, "Injected code");
                }
            }
        }
    }

    void    ReportVulnerability(u32 eip, const std::string &desc)
    {
        LxWarning("Vulnerability found: %s at %08x\n", desc.c_str(), eip);
        if (m_debugger->GetBreakpoint(eip) == NULL)
            m_debugger->AddBreakpoint(eip, desc);
    }

private:
    bool    m_detectInjectedCode;

    ADebugger *     m_debugger;
    TaintEngine *   m_taint;
};

VulnerabilityDetector v;