#pragma once
 
#ifndef __PROPHET_PLUGIN_VULNERABILITY_DETECTOR_H__
#define __PROPHET_PLUGIN_VULNERABILITY_DETECTOR_H__
 
#include "plugin.h"
#include "engine.h"
#include "event.h"

class VulnerabilityDetector : public Plugin {
public:
    VulnerabilityDetector(ProPluginManager *manager) 
        : Plugin(manager, "Vulnerability Detector", PreExecuteHandler)
    {
        Enable(false);
    }

    void    Initialize() override;
    void    Serialize(Json::Value &root) const override;
    void    Deserialize(Json::Value &root) override;
    void    OnPreExecute(PreExecuteEvent &event, bool firstTime) override;
    void    ReportVulnerability(u32 eip, const std::string &desc);

private:
    bool    m_detectInjectedCode;

    ProDebugger *   m_debugger;
    TaintEngine *   m_taint;
};
 
#endif // __PROPHET_PLUGIN_VULNERABILITY_DETECTOR_H__