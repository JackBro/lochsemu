#include "stdafx.h"
#include "vulnerability_detector.h"

void VulnerabilityDetector::Initialize()
{
    m_debugger  = GetEngine()->GetDebugger();
    m_taint     = GetEngine()->GetTaintEngine();
}

void VulnerabilityDetector::Serialize( Json::Value &root ) const 
{
    Plugin::Serialize(root);
    root["detect_injected_code"] = m_detectInjectedCode;
}

void VulnerabilityDetector::Deserialize( Json::Value &root )
{
    Plugin::Deserialize(root);
    m_detectInjectedCode = root.get("detect_injected_code", m_detectInjectedCode).asBool();
}

void VulnerabilityDetector::OnPreExecute( PreExecuteEvent &event, bool firstTime )
{
    if (!firstTime) return;
    u32 eip = event.Cpu->EIP;

    if (m_detectInjectedCode) {
        if (m_taint->CpuTaint[event.Cpu->IntID].Eip.IsAnyTainted()) {
            Taint1 t = m_taint->MemTaint.Get<1>(eip);
            if (t.IsAnyTainted()) {
                ReportVulnerability(eip, "Injected code");
            }
        }
    }
}

void VulnerabilityDetector::ReportVulnerability( u32 eip, const std::string &desc )
{
    LxWarning("Vulnerability found: %s at %08x\n", desc.c_str(), eip);
    if (m_debugger->GetBreakpoint(eip) == NULL)
        m_debugger->AddBreakpoint(eip, desc);
}


